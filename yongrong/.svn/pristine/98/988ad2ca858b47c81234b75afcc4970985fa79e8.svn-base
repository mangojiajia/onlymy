using System;
using System.Collections.Generic;
using System.Text;
using Yongrong.Model.Db;
using Yongrong.Model.Int;
using BaseS.File.Log;
using System.Linq;

namespace Yongrong.Srvc.Sys
{
    class AbnormalSrvc : BaseSrvc
    {
        /// <summary>
        /// 添加和更新 异常数据表
        /// </summary>
        /// <param name="query"></param>
        /// <returns></returns>
        public static string AddOrUpdate(Abnormal addupdobj, string op)
        {
            if (null == addupdobj)
            {
                return ParamNull;
            }

            using (var db = DbContext)
            {
                switch (op)
                {
                    case ADD:

                        addupdobj.Id = GetSeq("SEQ_ABNORMAL");
                        addupdobj.Isdispose = "0";
                        addupdobj.Createtime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                        db.Abnormal.Add(addupdobj);

                        break;
                    case UPD:

                        break;
                    case DEL:

                        break;
                    default:
                        OpEmpty.Info();
                        return OpEmpty;
                }

                db.SaveChanges();
            }

            return Success;
        }


        /// <summary>
        /// 异常数据查询
        /// </summary>
        /// <param name="query"></param>
        /// <param name="page"></param>
        /// <param name="baseTrailerslist"></param>
        /// <returns></returns>
        public static bool Get(Abnormal query, PageBean page, out List<Abnormal> abnormallist)
        {
            abnormallist = new List<Abnormal>();

            if (null == page)
            {
                page = new PageBean();
            }

            if (null == query)
            {
                query = new Abnormal();
            }

            //进去日志
            query.Debug();

            using (var db = DbContext)
            {
                page.Row = db.Abnormal.Count(a =>
                (string.IsNullOrWhiteSpace(query.Abnormalname) || (!string.IsNullOrWhiteSpace(a.Abnormalname) && a.Abnormalname.Contains(query.Abnormalname)))
                && (string.IsNullOrWhiteSpace(query.Abnormalcase) || query.Abnormalcase.Equals(a.Abnormalcase))
                && (string.IsNullOrWhiteSpace(query.Abnormaltype) || (!string.IsNullOrWhiteSpace(a.Abnormaltype) && a.Abnormaltype.Contains(query.Abnormaltype)))
                && (string.IsNullOrWhiteSpace(query.Isdispose) || query.Isdispose.Equals(a.Isdispose))
                && (string.IsNullOrWhiteSpace(query.Remark) || query.Remark.Equals(a.Remark))
                && (string.IsNullOrWhiteSpace(query.Createuser) || query.Createuser.Equals(a.Createuser))
                && (string.IsNullOrWhiteSpace(query.Createtime) || query.Createtime.Equals(a.Createtime))
                && (string.IsNullOrWhiteSpace(query.Updatetime) || query.Updatetime.Equals(a.Updatetime))
                && (string.IsNullOrWhiteSpace(query.Updateuser) || query.Updateuser.Equals(a.Updateuser))
                );

                page.SumPageCount();

                abnormallist.AddRange(
                    db.Abnormal.Where(a =>
                (string.IsNullOrWhiteSpace(query.Abnormalname) || (!string.IsNullOrWhiteSpace(a.Abnormalname) && a.Abnormalname.Contains(query.Abnormalname)))
                && (string.IsNullOrWhiteSpace(query.Abnormalcase) || query.Abnormalcase.Equals(a.Abnormalcase))
                && (string.IsNullOrWhiteSpace(query.Abnormaltype) || (!string.IsNullOrWhiteSpace(a.Abnormaltype) && a.Abnormaltype.Contains(query.Abnormaltype)))
                && (string.IsNullOrWhiteSpace(query.Isdispose) || query.Isdispose.Equals(a.Isdispose))
                && (string.IsNullOrWhiteSpace(query.Remark) || query.Remark.Equals(a.Remark))
                && (string.IsNullOrWhiteSpace(query.Createuser) || query.Createuser.Equals(a.Createuser))
                && (string.IsNullOrWhiteSpace(query.Createtime) || query.Createtime.Equals(a.Createtime))
                && (string.IsNullOrWhiteSpace(query.Updatetime) || query.Updatetime.Equals(a.Updatetime))
                && (string.IsNullOrWhiteSpace(query.Updateuser) || query.Updateuser.Equals(a.Updateuser))
                    )
                    .OrderByDescending(a => a.Id)
                    .Skip((page.Index - 1) * page.Size).Take(page.Size)
                    );
            }
            return true;
        }




    }
}
