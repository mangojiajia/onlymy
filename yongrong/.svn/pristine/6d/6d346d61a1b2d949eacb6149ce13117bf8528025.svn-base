using System;
using System.Collections.Generic;
using System.Text;
using Yongrong.Model.Int.BaseInfo;
using BaseS.Serialization;
using Yongrong.Srvc.BaseInfo;
using BaseS.String;
using Yongrong.Srvc.Users;
using System.IO;
using Microsoft.AspNetCore.Http;
using BaseS.File;
using System.Data;
using BaseS.Data;
using Yongrong.Model.Db;

namespace Yongrong.Int.BaseInfo
{
    class BaseTractorInt : BaseInt
    {
        /// <summary>
        /// 
        /// </summary>
        static readonly Dictionary<string, string> contractMap = new Dictionary<string, string>();

        static BaseTractorInt()
        {
            contractMap.TryAdd("", "");
        }

        /// <summary>
        /// 查询牵引车
        /// </summary>
        /// <param name="reqmap"></param>
        /// <param name="reqbytes"></param>
        /// <returns></returns>
        public static byte[] Get(Dictionary<string, string> reqmap, byte[] reqbytes)
        {
            BaseTractorRsp rsp = new BaseTractorRsp();

            reqbytes.Json2ObjT<BaseTractorReq>(out BaseTractorReq req);

            if (null == req)
            {
                rsp.Stat = JsonErr;

                reqmap.TryAdd(OP_Content, rsp.Stat);
                reqmap.TryAdd(OP_Detail, reqbytes.B2String());

                return rsp.ToBytes();
            }

            if (!Success.Equals(req.Check()))
            {
                rsp.Stat = req.Check();

                reqmap.TryAdd(OP_Content, rsp.Stat);
                reqmap.TryAdd(OP_Detail, reqbytes.B2String());

                return rsp.ToBytes();
            }

            if (!UserSrvc.GetOne(new Model.Db.User() { Token = req.Token }, out var user))
            {
                rsp.Stat = "用户不存在";

                reqmap.TryAdd(OP_Content, "用户不存在");
                reqmap.TryAdd(OP_Detail, "Token:" + req.Token);

                return rsp.ToBytes();
            }

            if (Sys.CustomRole.Contains(user.Roleids))
            {
                req.Query.Transport = user.Userid;
            }


            BaseTractorSrvc.Get(
                req.Query,
                req.Page,
                out var TractorList);

            if (null == req.Page)
            {
                rsp.Page = new Model.Int.PageBean();
            }
            else
            {
                req.Page.CopyPage(rsp.Page);
            }

            rsp.Stat = Success;
            rsp.List = TractorList;

            reqmap.TryAdd(OP_User, user?.Userid);
            reqmap.TryAdd(OP_Content, $"查询牵引车");

            return rsp.ToBytes();
        }


        /// <summary>
        /// 添加牵引车信息
        /// </summary>
        /// <param name="reqmap"></param>
        /// <param name="reqbytes"></param>
        /// <returns></returns>
        public static byte[] AddUpd(Dictionary<string, string> reqmap, byte[] reqbytes)
        {
            BaseTractorAddRsp rsp = new BaseTractorAddRsp();

            reqbytes.Json2ObjT<BaseTractorAddReq>(out BaseTractorAddReq req);

            if (null == req)
            {
                rsp.Stat = JsonErr;

                reqmap.TryAdd(OP_Content, rsp.Stat);
                reqmap.TryAdd(OP_Detail, reqbytes.B2String());

                return rsp.ToBytes();
            }

            if (!Success.Equals(req.Check()))
            {
                rsp.Stat = req.Check();

                reqmap.TryAdd(OP_Content, rsp.Stat);
                reqmap.TryAdd(OP_Detail, reqbytes.B2String());

                return rsp.ToBytes();
            }

            if (!UserSrvc.GetOne(new Model.Db.User() { Token = req.Token }, out var user))
            {
                rsp.Stat = "用户不存在";

                reqmap.TryAdd(OP_Content, "用户不存在");
                reqmap.TryAdd(OP_Detail, "Token:" + req.Token);

                return rsp.ToBytes();

            }

            rsp.Stat = BaseTractorSrvc.AddOrUpdate(req.Tractor, req.Op);

            reqmap.TryAdd(OP_User, user?.Userid);
            reqmap.TryAdd(OP_Content, $"{GetOPName(req.Op)}牵引车");

            return rsp.ToBytes();
        }


        /// <summary>
        /// 上传文件
        /// </summary>
        /// <param name="reqmap"></param>
        /// <param name="reqbytes"></param>
        /// <returns></returns>
        public static byte[] Upload(Dictionary<string, string> reqmap, byte[] reqbytes)
        {
            BaseTractorAddRsp rsp = new BaseTractorAddRsp() { Stat = Success };

            string allmsg = System.Text.Encoding.UTF8.GetString(reqbytes);
            String[] sArray = allmsg.Split(System.Environment.NewLine);

            for (int i = 0; i < sArray.Length; i++)
            {
                sArray[i] = sArray[i]?.Trim();
            }

            BCsv.Csv2DataTable(sArray, out DataTable table, true, contractMap);

            var tractorlist = BDataTable.ToList_Old<BaseTractor>(table);

            foreach (var tractor in tractorlist ?? new List<BaseTractor>())
            {
                BaseTractorSrvc.AddOrUpdate(tractor, ADD);
            }

            return rsp.ToBytes();
        }

    }
}
